#include "RTT_2.h"
#include "mls.h"

u32 lfsr_polynomial_masks_4[]={0x9,0xC};
u32 lfsr_polynomial_masks_5[]={0x12,0x14,0x17,0x1B,0x1D,0x1E};
u32 lfsr_polynomial_masks_6[]={0x21,0x2D,0x30,0x33,0x36,0x39};
u32 lfsr_polynomial_masks_7[]={0x41,0x44,0x47,0x48,0x4E,0x53,0x55,0x5C,0x5F,0x60,0x65,0x69,0x6A,0x72,0x77,0x78,0x7B,0x7E};
u32 lfsr_polynomial_masks_8[]={0x8E,0x95,0x96,0xA6,0xAF,0xB1,0xB2,0xB4,0xB8,0xC3,0xC6,0xD4,0xE1,0xE7,0xF3,0xFA};
u32 lfsr_polynomial_masks_9[]={0x108,0x10D,0x110,0x116,0x119,0x12C,0x12F,0x134,0x137,0x13B,0x13E,0x143,0x14A,0x151,0x152,0x157,0x15B,0x15E,0x167,0x168,0x16D,0x17A,0x17C,0x189,0x18A,0x18F,0x191,0x198,0x19D,0x1A7,0x1AD,0x1B0,0x1B5,0x1B6,0x1B9,0x1BF,0x1C2,0x1C7,0x1DA,0x1DC,0x1E3,0x1E5,0x1E6,0x1EA,0x1EC,0x1F1,0x1F4,0x1FD};
u32 lfsr_polynomial_masks_10[]={0x204,0x20D,0x213,0x216,0x232,0x237,0x240,0x245,0x262,0x26B,0x273,0x279,0x27F,0x286,0x28C,0x291,0x298,0x29E,0x2A1,0x2AB,0x2B5,0x2C2,0x2C7,0x2CB,0x2D0,0x2E3,0x2F2,0x2FB,0x2FD,0x309,0x30A,0x312,0x31B,0x321,0x327,0x32D,0x33C,0x33F,0x344,0x35A,0x360,0x369,0x36F,0x37E,0x38B,0x38E,0x390,0x39C,0x3A3,0x3A6,0x3AA,0x3AC,0x3B1,0x3BE,0x3C6,0x3C9,0x3D8,0x3ED,0x3F9,0x3FC};
u32 lfsr_polynomial_masks_11[]={0x402,0x40B,0x415,0x416,0x423,0x431,0x432,0x438,0x43D,0x446,0x44A,0x44F,0x454,0x458,0x467,0x468,0x470,0x473,0x475,0x47A,0x486,0x489,0x492,0x494,0x49D,0x49E,0x4A2,0x4A4,0x4A8,0x4AD,0x4B9,0x4BA,0x4BF,0x4C1,0x4C7,0x4D5,0x4D6,0x4DC,0x4E3,0x4EC,0x4F2,0x4FB,0x500,0x503,0x509,0x50A,0x514,0x524,0x530,0x536,0x53C,0x53F,0x542,0x548,0x54E,0x553,0x555,0x559,0x55A,0x56A,0x56F,0x574,0x577,0x578,0x57D,0x581,0x584,0x588,0x599,0x59F,0x5A0,0x5A5,0x5AC,0x5AF,0x5B2,0x5B7,0x5BE,0x5C3,0x5C5,0x5C9,0x5CA,0x5D7,0x5DB,0x5DE,0x5E4,0x5ED,0x5EE,0x5F3,0x5F6,0x605,0x606,0x60C,0x60F,0x62B,0x630,0x635,0x639,0x642,0x644,0x64B};
u32 lfsr_polynomial_masks_12[]={0x829,0x834,0x83D,0x83E,0x84C,0x868,0x875,0x883,0x88F,0x891,0x89D,0x8A7,0x8AB,0x8B0,0x8B5,0x8C2,0x8D9,0x8EC,0x8EF,0x906,0x91B,0x91E,0x933,0x939,0x93F,0x95C,0x960,0x965,0x987,0x98E,0x990,0x99C,0x99F,0x9A6,0x9B8,0x9CC,0x9D1,0x9D4,0xA03,0xA18,0xA1B,0xA27,0xA2E,0xA33,0xA3A,0xA53,0xA56,0xA69,0xA87,0xA8E,0xAA6,0xAC9,0xAE2,0xAEB,0xAEE,0xAF5,0xB04,0xB23,0xB2A,0xB2C,0xB52,0xB5E,0xB8A,0xB8C,0xBA1,0xBA2,0xBBA,0xBC4,0xBD6,0xBD9,0xBDF,0xBE0,0xC2B,0xC2E,0xC48,0xC4B,0xC5C,0xC77,0xC8D,0xC9A,0xCA0,0xCB2,0xCBD,0xCC5,0xCD8,0xCDE,0xCE4,0xCE7,0xCF3,0xD0D,0xD15,0xD19,0xD34,0xD45,0xD68,0xD70,0xD7A,0xD85,0xD89,0xD8F};
u32 lfsr_polynomial_masks_13[]={0x100D,0x1013,0x101A,0x1029,0x1032,0x1037,0x1045,0x1046,0x104F,0x1052,0x1057,0x105D,0x105E,0x1061,0x1064,0x1070,0x1079,0x1086,0x108A,0x1094,0x1097,0x109D,0x10A1,0x10B3,0x10B5,0x10BC,0x10C4,0x10CB,0x10CE,0x10DF,0x10E0,0x10E3,0x10E6,0x10EF,0x10F1,0x10F8,0x10FD,0x110C,0x1112,0x111B,0x111E,0x1121,0x112D,0x112E,0x113C,0x113F,0x1144,0x114B,0x114D,0x1159,0x115F,0x1166,0x1177,0x117B,0x117D,0x1182,0x1193,0x1195,0x11A3,0x11AA,0x11AC,0x11B7,0x11B8,0x11BE,0x11C3,0x11C6,0x11CA,0x11D1,0x11D4,0x11D8,0x11DB,0x11DD,0x11F0,0x11F6,0x11FC,0x1205,0x1209,0x120F,0x1212,0x1214,0x121E,0x1228,0x122B,0x1230,0x1236,0x123F,0x1241,0x124D,0x124E,0x125A,0x125F,0x1260,0x1263,0x1265,0x1271,0x1284,0x128B,0x128E,0x1290,0x1296};
u32 lfsr_polynomial_masks_14[]={0x2015,0x201C,0x2029,0x202F,0x203D,0x2054,0x2057,0x205D,0x205E,0x2067,0x2075,0x2079,0x2086,0x2089,0x209D,0x20A1,0x20CD,0x20CE,0x20D3,0x20D6,0x20DA,0x20EA,0x20EC,0x20F8,0x2106,0x212B,0x2130,0x213F,0x2142,0x214E,0x2163,0x2165,0x2166,0x2171,0x2174,0x2177,0x2184,0x2190,0x219F,0x21BE,0x21C3,0x21CA,0x21D7,0x21E4,0x21F5,0x21F6,0x2205,0x2221,0x2239,0x2269,0x226A,0x226F,0x2271,0x227D,0x2295,0x229C,0x22AC,0x22B7,0x22CC,0x22CF,0x22D2,0x22DB,0x22E2,0x22EB,0x22F3,0x22F9,0x22FF,0x2307,0x230E,0x2313,0x231A,0x2323,0x232C,0x2331,0x2338,0x233D,0x2352,0x2362,0x2367,0x236D,0x2398,0x23A7,0x23BF,0x23D3,0x23E0,0x23F2,0x23F4,0x23F7,0x2409,0x240C,0x241D,0x2421,0x242D,0x2430,0x2433,0x243F,0x2441,0x2471,0x248E,0x2496};
u32 lfsr_polynomial_masks_15[]={0x4001,0x4008,0x400B,0x4016,0x401A,0x402F,0x403B,0x4040,0x4043,0x4049,0x4052,0x4061,0x4067,0x406E,0x4073,0x407A,0x4080,0x408A,0x4092,0x40AB,0x40AE,0x40B0,0x40B6,0x40C2,0x40D0,0x40D3,0x40DC,0x40E5,0x40E6,0x40EF,0x40FE,0x4109,0x411D,0x4122,0x413F,0x4144,0x4147,0x414D,0x4165,0x416C,0x418B,0x418D,0x4195,0x4199,0x41A3,0x41A6,0x41AF,0x41B1,0x41B4,0x41B8,0x41C5,0x41CC,0x41D7,0x41DE,0x41E2,0x41E8,0x420C,0x4211,0x4217,0x4218,0x421B,0x4233,0x4236,0x423C,0x4241,0x424B,0x4250,0x425A,0x426F,0x427B,0x427E,0x428E,0x4290,0x4293,0x4299,0x42A3,0x42A5,0x42AF,0x42B8,0x42BD,0x42C0,0x42C6,0x42D1,0x42D8,0x42E2,0x42E4,0x42ED,0x42F6,0x42F9,0x4304,0x4308,0x430E,0x4315,0x432A,0x432C,0x4332,0x433E,0x4340,0x4354,0x4357};
u32 lfsr_polynomial_masks_16[]={0x8016,0x801C,0x801F,0x8029,0x805E,0x806B,0x8097,0x809E,0x80A7,0x80AE,0x80CB,0x80D0,0x80D6,0x80DF,0x80E3,0x810A,0x810C,0x8112,0x8117,0x812E,0x8136,0x8142,0x8148,0x8150,0x8172,0x818E,0x81A5,0x81B4,0x81B8,0x81C3,0x81C6,0x81CF,0x81D1,0x81EE,0x81FC,0x8214,0x822B,0x8233,0x8241,0x8244,0x8248,0x825F,0x8260,0x8299,0x82A3,0x82B4,0x82C3,0x82E1,0x82EE,0x82F5,0x8320,0x8325,0x8329,0x8345,0x8361,0x83B5,0x83B6,0x83BC,0x83C1,0x83F8,0x8406,0x8430,0x845F,0x846A,0x846F,0x8471,0x8478,0x847D,0x849C,0x84BE,0x84C5,0x84D2,0x84D7,0x84E1,0x84E2,0x84F3,0x84F9,0x853E,0x8540,0x855D,0x8562,0x8580,0x8589,0x858A,0x85A8,0x85AE,0x85E6,0x85E9,0x85F2,0x8607,0x860E,0x8610,0x8634,0x8638,0x863D,0x8646,0x864A,0x8651,0x8657,0x8679};
u32 lfsr_polynomial_masks_17[]={0x10004,0x10007,0x10010,0x10016,0x10019,0x1001F,0x10020,0x1002A,0x10034,0x1003D,0x10046,0x1004C,0x10051,0x10057,0x1005D,0x10062,0x1007A,0x10085,0x10086,0x1008C,0x10092,0x1009E,0x100AB,0x100B0,0x100B3,0x100B6,0x100BF,0x100C1,0x100E0,0x100E3,0x100E5,0x100EC,0x100F8,0x10106,0x10111,0x10114,0x10118,0x1011B,0x10122,0x10135,0x1013C,0x1013F,0x10141,0x10148,0x1015A,0x10163,0x1016F,0x10171,0x10174,0x1017E,0x10184,0x10188,0x1018B,0x1018D,0x10193,0x10199,0x1019A,0x101A9,0x101BB,0x101D8,0x101DB,0x101E1,0x101E8,0x101ED,0x101F5,0x10203,0x1020A,0x1020C,0x1020F,0x10217,0x1021E,0x10221,0x1022B,0x1022E,0x10230,0x10233,0x1023A,0x10242,0x10247,0x1024E,0x10255,0x1025C,0x10260,0x10266,0x1027B,0x1027D,0x1028D,0x1028E,0x10293,0x1029A,0x1029F,0x102B1,0x102B2,0x102B7,0x102C9,0x102D2,0x102DD,0x102F6,0x10302,0x1030E};
u32 lfsr_polynomial_masks_18[]={0x20013,0x2001F,0x20026,0x2003D,0x20040,0x2006D,0x20073,0x20076,0x20083,0x200A7,0x200C8,0x200F1,0x200F4,0x200F7,0x20105,0x20109,0x20130,0x2013A,0x20155,0x20178,0x2018B,0x20195,0x20196,0x201BB,0x201C3,0x201CA,0x201CC,0x201D4,0x201D8,0x201E2,0x201EB,0x201F0,0x2020C,0x20218,0x2021E,0x2022D,0x2023C,0x20244,0x20250,0x20290,0x202C9,0x202CF,0x202E2,0x202ED,0x202F0,0x202FF,0x20304,0x2030E,0x20315,0x2033E,0x20346,0x20394,0x20398,0x203A8,0x203DF,0x203E6,0x203F8,0x20400,0x2041D,0x20439,0x20442,0x20465,0x2046F,0x20477,0x2047E,0x20482,0x20493,0x20496,0x204B2,0x204BD,0x204C9,0x204D1,0x204D2,0x204E4,0x204E7,0x2050E,0x20545,0x2054A,0x20562,0x20567,0x2056B,0x20570,0x2057A,0x2058C,0x20594,0x2059D,0x205A8,0x205B3,0x205C1,0x205E3,0x205EC,0x205F8,0x20625,0x20638,0x2063D,0x20676,0x2067F,0x206C2,0x206CB,0x206CD};
u32 lfsr_polynomial_masks_19[]={0x40013,0x4001F,0x40023,0x40029,0x4002C,0x40031,0x40037,0x4003E,0x40049,0x40057,0x40070,0x400A1,0x400B0,0x400B5,0x400BA,0x400C2,0x400CE,0x400D0,0x400D6,0x400D9,0x400DF,0x400E3,0x400E6,0x400EF,0x40105,0x40109,0x4010C,0x40112,0x40118,0x40127,0x40128,0x40135,0x40136,0x40141,0x40142,0x4014B,0x40150,0x40190,0x401A3,0x401B4,0x401B7,0x401CF,0x401D2,0x401D4,0x401E4,0x401EB,0x401ED,0x401EE,0x401F9,0x4021B,0x40228,0x4023A,0x4023F,0x40244,0x40248,0x4025A,0x4025C,0x40269,0x4026C,0x4028E,0x40295,0x4029C,0x402A0,0x402A9,0x402AF,0x402B8,0x402BB,0x402D4,0x402DD,0x402E8,0x402EB,0x402EE,0x402F5,0x402FA,0x402FC,0x40304,0x40308,0x40319,0x40320,0x40325,0x40326,0x4032F,0x40332,0x40343,0x40345,0x4035E,0x40361,0x40368,0x40373,0x40376,0x4038A,0x4039D,0x403A2,0x403A4,0x403AB,0x403C2,0x403C8,0x403CE,0x403F7,0x403FE};
u32 lfsr_polynomial_masks_20[]={0x80004,0x80029,0x80032,0x80034,0x8003D,0x80079,0x800B3,0x800B6,0x800BF,0x800C7,0x800DF,0x80111,0x80114,0x80118,0x8015C,0x80199,0x801A9,0x801AC,0x801B7,0x801E1,0x801FA,0x801FF,0x80211,0x80242,0x8024B,0x80260,0x80263,0x80266,0x80274,0x80284,0x80295,0x802CF,0x802F6,0x802F9,0x80302,0x80315,0x8031C,0x8032A,0x80338,0x8033D,0x8035B,0x8036E,0x80379,0x8038A,0x8039B,0x803A4,0x803BC,0x803EF,0x803FB,0x8040C,0x80414,0x8041B,0x80421,0x80448,0x8044D,0x80456,0x8045F,0x8048D,0x80499,0x8049C,0x804A6,0x804BD,0x804C6,0x804CC,0x804D7,0x804E7,0x804EE,0x804F0,0x80504,0x80513,0x8051A,0x80526,0x80529,0x80534,0x80543,0x8054A,0x80558,0x80568,0x8057A,0x805BC,0x805C1,0x805EA,0x805EC,0x80608,0x80637,0x8065B,0x8069D,0x8069E,0x806D0,0x80705,0x80718,0x80733,0x80735,0x80741,0x80753,0x80769,0x8076F,0x80799,0x807A5,0x807B8};
u32 lfsr_polynomial_masks_21[]={0x100002,0x100013,0x10001F,0x100032,0x100037,0x10003D,0x10003E,0x100049,0x10005B,0x100083,0x10008F,0x10009D,0x1000A4,0x1000A7,0x1000B6,0x1000B9,0x1000C2,0x1000CB,0x1000CE,0x1000D3,0x1000D5,0x1000DA,0x1000DC,0x1000F1,0x1000F7,0x10010C,0x100112,0x10011B,0x10011E,0x10012D,0x100139,0x100156,0x100169,0x100184,0x10018D,0x1001A9,0x1001B1,0x1001BB,0x1001CF,0x1001D1,0x1001D7,0x1001DD,0x1001E2,0x1001EE,0x10020A,0x10020C,0x100211,0x100224,0x10022E,0x10023A,0x100248,0x10024B,0x100253,0x100272,0x100274,0x100277,0x10027E,0x100287,0x100295,0x1002AA,0x1002DB,0x1002EB,0x1002F0,0x1002F5,0x1002F6,0x100308,0x10031F,0x100329,0x100345,0x10035D,0x100361,0x10036B,0x100370,0x10037F,0x1003A1,0x1003AE,0x1003B5,0x1003BA,0x1003CB,0x1003D5,0x1003D9,0x1003E0,0x1003E6,0x1003E9,0x100406,0x100409,0x10040A,0x100427,0x100430,0x100441,0x100448,0x10044B,0x100455,0x10045C,0x10046F,0x100478,0x10047D,0x10049A,0x1004AC,0x1004B2};
u32 lfsr_polynomial_masks_22[]={0x200001,0x20001C,0x20005E,0x200061,0x200094,0x2000B0,0x2000B9,0x2000C7,0x2000D9,0x2000F8,0x200111,0x200133,0x200156,0x20015A,0x200182,0x200188,0x2001A5,0x2001B4,0x2001C0,0x2001DB,0x2001E7,0x2001EB,0x2001ED,0x200209,0x200239,0x200244,0x200272,0x200287,0x20028D,0x20029F,0x2002A3,0x2002BD,0x2002C3,0x2002C6,0x2002CC,0x2002DD,0x20030B,0x20030D,0x200332,0x200345,0x200358,0x200361,0x20036D,0x200398,0x2003B5,0x2003BF,0x2003C2,0x2003E3,0x2003EC,0x2003FD,0x200403,0x200414,0x200427,0x200433,0x20044B,0x200459,0x200460,0x200463,0x200481,0x20049F,0x2004BE,0x2004C6,0x2004D7,0x2004DD,0x2004E1,0x2004E2,0x2004ED,0x2004FA,0x200515,0x20051C,0x20053E,0x20054A,0x20054F,0x20056E,0x200575,0x200576,0x20057C,0x200589,0x2005A4,0x2005AD,0x2005B3,0x2005B6,0x2005BA,0x2005BF,0x2005EC,0x2005EF,0x200616,0x200623,0x200634,0x20064A,0x20064C,0x20064F,0x200651,0x200667,0x20066B,0x200685,0x200697,0x20069B,0x20069E,0x2006A8};
u32 lfsr_polynomial_masks_23[]={0x400010,0x400015,0x400016,0x400019,0x40001F,0x400026,0x400032,0x40003B,0x400043,0x400045,0x40004C,0x400051,0x40005E,0x400062,0x400079,0x40007C,0x400097,0x40009D,0x4000AD,0x4000B0,0x4000B3,0x4000C1,0x4000C4,0x4000FB,0x400100,0x40010F,0x400112,0x400124,0x400127,0x40012B,0x40012D,0x400136,0x40013C,0x400147,0x400148,0x40015C,0x40016F,0x400177,0x400181,0x400193,0x400196,0x4001A0,0x4001B2,0x4001D1,0x4001D2,0x4001D8,0x4001DE,0x4001F6,0x400206,0x400214,0x400228,0x400247,0x400260,0x40026F,0x400293,0x400295,0x4002A0,0x4002B7,0x4002D2,0x4002D4,0x4002E2,0x4002F0,0x400308,0x40030E,0x40032F,0x400331,0x400340,0x40035D,0x400362,0x40036D,0x40036E,0x400376,0x400379,0x400389,0x40038A,0x400391,0x40039B,0x4003BF,0x4003D0,0x4003DA,0x4003EF,0x4003F2,0x4003FB,0x4003FD,0x40041D,0x40041E,0x40042D,0x40043F,0x400444,0x40044D,0x400455,0x400456,0x400460,0x400463,0x40046A,0x400484,0x400490,0x40049C,0x4004AA,0x4004B2};
u32 lfsr_polynomial_masks_24[]={0x80000D,0x800043,0x800058,0x80006D,0x80007A,0x800092,0x8000BF,0x8000DA,0x8000E5,0x800112,0x800128,0x80012B,0x800136,0x8001B1,0x8001B4,0x8001D7,0x8001E1,0x8001E7,0x8001F9,0x80020C,0x800221,0x800224,0x8002BD,0x800329,0x800345,0x80035E,0x8003A7,0x8003A8,0x8003C7,0x800412,0x80041B,0x800422,0x80042B,0x80044E,0x800453,0x80047E,0x800481,0x8004DE,0x8004ED,0x8004F6,0x800507,0x800520,0x800523,0x80053D,0x80055D,0x800579,0x800580,0x80058F,0x800594,0x80059B,0x8005A2,0x8005A4,0x8005A8,0x8005BA,0x8005D6,0x8005EA,0x800602,0x800613,0x80066E,0x80067F,0x80069B,0x8006B5,0x8006E6,0x8006E9,0x8006EF,0x8006F4,0x80070A,0x800730,0x800759,0x80075F,0x800795,0x8007BE,0x8007DE,0x8007E4,0x800806,0x800817,0x800853,0x800863,0x8008A6,0x8008D1,0x8008D7,0x8008E7,0x8008F3,0x8008FC,0x80090B,0x800916,0x80093B,0x800973,0x8009F8,0x8009FE,0x800A23,0x800A3E,0x800AA1,0x800AA7,0x800AAB,0x800AC4,0x800AD5,0x800B35,0x800B4D,0x800B87};


// first 100 LFSR masks for different log2(length) MLS sequences
lfsr_polynomial_mask lfsr_polynomial_masks[25]={
  lfsr_polynomial_mask(0,0),
  lfsr_polynomial_mask(0,0),
  lfsr_polynomial_mask(0,0),
  lfsr_polynomial_mask(0,0),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_4),lfsr_polynomial_masks_4),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_5),lfsr_polynomial_masks_5),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_6),lfsr_polynomial_masks_6),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_7),lfsr_polynomial_masks_7),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_8),lfsr_polynomial_masks_8),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_9),lfsr_polynomial_masks_9),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_10),lfsr_polynomial_masks_10),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_11),lfsr_polynomial_masks_11),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_12),lfsr_polynomial_masks_12),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_13),lfsr_polynomial_masks_13),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_14),lfsr_polynomial_masks_14),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_15),lfsr_polynomial_masks_15),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_16),lfsr_polynomial_masks_16),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_17),lfsr_polynomial_masks_17),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_18),lfsr_polynomial_masks_18),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_19),lfsr_polynomial_masks_19),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_20),lfsr_polynomial_masks_20),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_21),lfsr_polynomial_masks_21),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_22),lfsr_polynomial_masks_22),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_23),lfsr_polynomial_masks_23),
  lfsr_polynomial_mask(sizeof(lfsr_polynomial_masks_24),lfsr_polynomial_masks_24)
};



LFSR::LFSR(int _log2_length,bool random_start):log2_length(_log2_length),lfsr_mask_used(0),curval(1){
  if (random_start){
    lfsr_mask_used=0;// need to randomize with time here
    curval=1;// need to randomize with time here
  }
  mask=lfsr_polynomial_masks[log2_length].data[lfsr_mask_used];
  num=1<<log2_length;
  data.resize(num);
  data_binary.resize(num);
  u32 step_to_print=num/100;
  s32 print_countdown=0;
  cout<<"Generating MLS sequence of "<<num<<" entries:"<<endl;
  for(u32 i=0;i<num;i++){
    data_binary[i]=curval;
    if (curval&1){
      data[i]=1.0f;
      curval=(curval>>1)^mask;
    }else{
      data[i]=-1.0f;
      curval=(curval>>1);     
    }
    if (curval==0){
      cout<<"LFSR generatIon stalled with zero...."<<endl;
    }
    if (print_countdown--<=0){
      cout<<curval<<" ";
      print_countdown=step_to_print;
    }
  }
  cout<<endl<<"Generated OK"<<endl;
} 



LFSR::~LFSR(){
}



walsh_hadamard::walsh_hadamard(u32 _order, vector<u8> &_mls):order(_order),mls(_mls){
  // constructor to cater for for system transfer function determination by impulse response recovery
  // in this case the hadamard transform is used for analysing MLS data
  // _order is the log2(size of the MLS vector)
  // the vector MLS is the binary output of the linear feedbck shift register
  // algorithm used to stimulate0 the system under investigation
  P=1<<order-1;
  
  // generate required permuatations for ordering before the fast hadamard loop
  tagS.resize(order);
  for(u32 i=0;i<order;i++){
    u32 factor=1<<(order-i);
    tagS[i].resize(order+P);
    u32 index_st1=P-i*2;
    for(u32 j=0;j<i;j++){
      tagS[i][j]=factor*mls[index_st1++];
    }
    u32 index_st2=0;
    for(u32 j=i;j<=P;j++){
      tagS[i][j]=factor*mls[index_st2++];
    }
  }
  vector<u32> index(order,0);
  // generate required permuatations for de-scrambling after the fast hadamard loop
  for(u32 i=0;i<P;i++){
    for(u32 j=0;j<order;j++){
      if (tagS[j][i]==(1<<j)){
        index[j]=i;
      }
    }
  }
}








void walsh_hadamard::fast_hadamard(vector<float> &x,vector<float> &y){
  int k1=P-1;
  for(int k=0;k<order;k++){
    int k2=k1>>1;
    for(int j=0;j<k2;j++){
      for(int i=j;i<P;i+=k1){
        int i1=i+k2;
        float temp=x[i]+x[i1];
        x[i1]=x[i]+x[i1];
        x[i]=temp;
      }
    }
  }
}

//    ## FastHadamard
//function y = FastHadamard(x, P1, N)
//# Applies a Fast Hadamard transform to a 1-D signal
//#
//# y = FastHadamard(x, P, N)
//#
//# x:	Signal to be transformed
//# P:	Length of MLS, where P=2N-1
//# N:	Order of MLS
//# y: 	Transformed signal
//
//k1 = P1;
//for k=1:1:N
//    k2 = k1/2;
//    for j=1:1:k2
//        for i=j:k1:P1
//            i1 = i + k2;
//            temp = x(i) + x(i1);
//            x(i1) = x(i) - x(i1);
//            x(i) = temp;
//        end
//    end
//    k1 = k1/2;
//end
//
//y = x;
//

